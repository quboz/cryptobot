import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from playwright.async_api import async_playwright
import re
import os
import aiohttp
from aiogram.client.default import DefaultBotProperties
import hashlib
from aiogram.types import CallbackQuery
from openai import OpenAI
import html
from html import escape
import json
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = "8138380518:AAHt-pjc94XFKnQW8MfJHX-WeBhZPaIJvJY"
CHANNEL_ID = 1685580880
DB_PATH = "profiles.db"
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
CACHE_FILE = "stat_cache.json"
DB_PATH1 = "tracked_posts.db"
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)
logging.basicConfig(level=logging.INFO)
TRACKED_TOKENS = set()

openai_client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key="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",
)

def migrate_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    try:
        cur.execute("ALTER TABLE profiles ADD COLUMN post_ids TEXT DEFAULT ''")
        conn.commit()
        print("üü¢ –ö–æ–ª–æ–Ω–∫–∞ post_ids —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e):
            print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ post_ids —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            raise
    finally:
        conn.close()

def init_db():
    # === –ë–î 1: tracked_posts.db ===
    with sqlite3.connect(DB_PATH1) as conn1:
        c1 = conn1.cursor()
        c1.execute("""
            CREATE TABLE IF NOT EXISTS posts (
                token TEXT,
                post_id TEXT,
                PRIMARY KEY (token, post_id)
            )
        """)
        conn1.commit()

    # === –ë–î 2: profiles.db ===
    with sqlite3.connect("profiles.db") as conn2:
        c2 = conn2.cursor()
        c2.execute('''
            CREATE TABLE IF NOT EXISTS profiles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                url TEXT UNIQUE,
                post_ids TEXT DEFAULT ''
            )
        ''')
        conn2.commit()


def add_profile(url: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO profiles (url) VALUES (?)", (url,))
    conn.commit()
    conn.close()

def get_profiles():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT url, post_ids FROM profiles")
    profiles = cur.fetchall()
    conn.close()
    return [(url, post_ids.split(',')) if post_ids else (url, []) for url, post_ids in profiles]

def update_post_ids(url: str, new_id: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT post_ids FROM profiles WHERE url = ?", (url,))
    row = cur.fetchone()
    old_ids = row[0].split(',') if row and row[0] else []
    if new_id not in old_ids:
        old_ids = ([new_id] + old_ids)[:5]  
    cur.execute("UPDATE profiles SET post_ids = ? WHERE url = ?", (','.join(old_ids), url))
    conn.commit()
    conn.close()


async def fetch_latest_post(profile_url: str):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context(user_agent=USER_AGENT)
        page = await context.new_page()
        
        try:
            await page.goto(profile_url, timeout=60000)
            await page.wait_for_load_state("domcontentloaded")
            # –£–≤–µ–ª–∏—á–∏–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            try:
                await page.wait_for_selector("div.card-content-box", timeout=30000)
            except:
                await page.wait_for_selector("div.css-1s5s0hx", timeout=30000)  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            await browser.close()
            return None

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        cards = await page.query_selector_all("div.card-content-box")
        if not cards:
            cards = await page.query_selector_all("div.css-1s5s0hx")  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        
        if not cards:
            logging.warning("–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            await browser.close()
            return None

        card = cards[0]
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            try:
                text = await card.inner_text()
            except:
                text = await card.evaluate("el => el.textContent")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            for unwanted in [
                "—Å–º. –æ—Ä–∏–≥–∏–Ω–∞–ª", "subscribe to", "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "see original", 
                "likecomment", "share", "comment", "like", "repost"
            ]:
                text = re.sub(unwanted, "", text, flags=re.IGNORECASE)

            lines = text.strip().split("\n")
            seen = set()
            cleaned_lines = []

            for line in lines:
                line = line.strip()
                if not line:
                    continue
                if line in seen:
                    continue
                if re.match(r"^\d+(\.\d+)?[kK]?$", line):  # –ß–∏—Å–ª–∞
                    continue
                if re.fullmatch(r"[A-Z0-9]+", line):  # HEX-–∫–æ–¥—ã
                    continue
                if any(phrase in line.lower() for phrase in ["—Å–º. –æ—Ä–∏–≥–∏–Ω–∞–ª", "subscribe to"]):
                    continue
                seen.add(line)
                cleaned_lines.append(line)

            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ
            while cleaned_lines and cleaned_lines[0].lower().startswith(("binance", "bibi")):
                cleaned_lines.pop(0)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_el = await card.query_selector("div.font-bold, .font-bold")
            if not title_el:
                title_el = await card.query_selector("div.css-1k5hq0n")  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                
            header = await title_el.inner_text() if title_el else ""

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if cleaned_lines and cleaned_lines[0] == header:
                cleaned_lines.pop(0)

            text_to_process = "\n".join(cleaned_lines).strip()

            # –í–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            if not text_to_process or len(text_to_process) < 20:
                logging.warning(f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {text_to_process}")
                await browser.close()
                return None

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
            cleaned_for_id = re.sub(r'\s+', '', (header + text_to_process).strip())
            post_id = hashlib.md5(cleaned_for_id.encode()).hexdigest()

            # –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            russian_chars = len(re.findall(r'[–∞-—è–ê-–Ø]', text_to_process))
            english_chars = len(re.findall(r'[a-zA-Z]', text_to_process))
            
            if english_chars > russian_chars:
                try:
                    logging.info("–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...")
                    response = openai_client.chat.completions.create(
                        model="meta-llama/llama-4-maverick:free",
                        messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π(–∏ –Ω–µ –ø–∏—à–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π)): {text_to_process}"}],
                        max_tokens=2000
                    )
                    translated = response.choices[0].message.content.strip()
                    if translated and len(translated) > 10:
                        text_to_process = translated
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

            # –°–∂–∞—Ç–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            if len(text_to_process) > 300:
                try:
                    logging.info("–°–∂–∞—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞...")
                    compress_response = openai_client.chat.completions.create(
                        model="meta-llama/llama-4-maverick:free",
                        messages=[{
                            "role": "user",
                            "content": f"–°–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–∏–≤ —Å—É—Ç—å (–±–µ–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤, —Ç–∞–∫–∂–µ –Ω–µ –ø–∏—à–∏ —Ñ—Ä–∞–∑—ã –ø–æ —Ç–∏–ø—É: –≤–æ—Ç –≤–∞—â —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç): {text_to_process}"
                        }],
                        max_tokens=1000
                    )
                    compressed = compress_response.choices[0].message.content.strip()
                    if compressed and len(compressed) > 20:
                        text_to_process = compressed
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            formatted_text = (
                f"<b>{escape(header)}</b>\n\n" if header else ""
            ) + f"<blockquote>{escape(text_to_process)}</blockquote>"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_urls = []
            image_elements = await card.query_selector_all("img")
            for img in image_elements:
                src = await img.get_attribute("src")
                if src:
                    if src.startswith("//"):
                        src = "https:" + src
                    elif src.startswith("/"):
                        src = "https://www.binance.com" + src
                    if src.startswith("http"):
                        image_urls.append(src)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
            nickname = profile_url.split("/")[-1]
            button = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîó –ò—Å—Ç–æ—á–Ω–∏–∫", url=profile_url)]]
            )

            await browser.close()
            return {
                "id": post_id,
                "text": formatted_text,
                "images": image_urls,
                "footer": f"<i>–ê–≤—Ç–æ—Ä: @{nickname}</i>",
                "button": button
            }

        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            await browser.close()
            return None




async def download_image(url: str, filename: str):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                with open(filename, 'wb') as f:
                    f.write(await resp.read())


@dp.message(Command("add"))
async def cmd_add(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add <—Å—Å—ã–ª–∫–∞>")
        return
    url = parts[1]
    if not (
        "binance.com/ru/square/profile/" in url or
        "binance.com/en/square/profile/" in url
    ):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Binance Square")
        return
    add_profile(url)
    await message.reply("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")


@dp.message(Command("last"))
async def cmd_last(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /last <—Å—Å—ã–ª–∫–∞>")
        return
    url = parts[1]
    post = await fetch_latest_post(url)
    if not post:
        await message.reply("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    _, old_ids = next(((u, ids) for u, ids in get_profiles() if u == url), (None, []))
    if post['id'] in old_ids:
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Ä–∞–Ω–µ–µ.")
        return
    await bot.send_message(CHANNEL_ID, f"<b>{hbold('–ù–æ–≤—ã–π –ø–æ—Å—Ç')}</b>\n{post['text']}\n\n{post['footer']}", reply_markup=post['button'])
    for i, img_url in enumerate(post["images"]):
        filename = f"image_{i}.jpg"
        await download_image(img_url, filename)
        with open(filename, "rb") as photo:
            await bot.send_photo(CHANNEL_ID, photo)
        os.remove(filename)
    update_post_ids(url, post['id'])
    await message.reply(f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. ID: <code>{post['id']}</code>")

@dp.message(Command("list"))
async def cmd_list(message: Message):
    profiles = get_profiles()
    text = "<b>üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π:</b>\n\n" + "\n".join(f"üîπ {url}" for url, _ in profiles)
    await message.reply(text or "üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—É—Å—Ç.")

@dp.message(Command("del"))
async def cmd_delete(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /del <—Å—Å—ã–ª–∫–∞>")
        return
    url = parts[1]
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM profiles WHERE url = ?", (url,))
    conn.commit()
    conn.close()
    await message.reply("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω.")


async def check_new_posts():
    while True:
        logging.info("üîÑ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
        for url, old_ids in get_profiles():
            try:
                post = await fetch_latest_post(url)
                if post and post['id'] not in old_ids:
                    text = f"<b>{hbold('–ù–æ–≤—ã–π –ø–æ—Å—Ç')}</b>\n{post['text']}\n\n{post['footer']}"
                    await bot.send_message(CHANNEL_ID, text, reply_markup=post['button'])
                    for i, img_url in enumerate(post['images']):
                        filename = f"image_{i}.jpg"
                        await download_image(img_url, filename)
                        with open(filename, "rb") as photo:
                            await bot.send_photo(CHANNEL_ID, photo)
                        os.remove(filename)
                    update_post_ids(url, post['id'])
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
        await asyncio.sleep(60)


@dp.message(Command("news"))
async def cmd_news(message: Message, bot: Bot):
    args = message.text.strip().split()
    if len(args) < 2 or len(args) > 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /news <—Ç–æ–∫–µ–Ω> [–∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤ –æ—Ç 1 –¥–æ 101]")
        return

    token = args[1].lower()
    limit = 10
    if len(args) == 3:
        try:
            limit = min(101, max(1, int(args[2])))
        except:
            await message.reply("‚ùå –ö–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 101.")
            return

    url = f"https://www.binance.com/ru/square/search?s={token}"
    await message.reply(f"üîç –ü–∞—Ä—Å–∏–º <b>{limit}</b> –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω—É <b>{token.upper()}</b>...")

    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            context = await browser.new_context(
                locale="ru-RU",
                extra_http_headers={"Accept-Language": "ru-RU,ru;q=0.9"},
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            )
            page = await context.new_page()
            await page.goto(url)
            await page.wait_for_selector("div.card-content-box", timeout=60000)

            cards = await page.query_selector_all("div.card-content-box")
            if not cards:
                await message.reply("‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            for i in range(min(limit, len(cards))):
                try:
                    card = cards[i]
                    await card.evaluate("el => el.click()")
                    await page.wait_for_selector("div#articleBody", timeout=20000)

                    # –ü–µ—Ä–µ–≤–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞)
                    try:
                        translate_btn = page.locator("div.common-trans-btn-list-item-text.css-vurnku >> text=–ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
                        if await translate_btn.count() > 0:
                            await translate_btn.click()
                            await asyncio.sleep(1.5)
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

                    raw_content = await page.locator("div.richtext-container").inner_text()
                    text_to_process = raw_content.strip()

                    # === –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ===
                    if not re.search(r'[–∞-—è–ê-–Ø]', text_to_process):
                        try:
                            logging.info("üåê –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π...")
                            response = openai_client.chat.completions.create(
                                model="meta-llama/llama-4-maverick:free",
                                messages=[
                                    {
                                        "role": "user",
                                        "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π(–∏ –Ω–µ –ø–∏—à–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π):\n\n{text_to_process}"
                                    }
                                ]
                            )
                            text_to_process = response.choices[0].message.content.strip()
                        except Exception as e:
                            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")

                    # === –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ===
                    try:
                        logging.info("‚úÇÔ∏è –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç...")
                        compress_response = openai_client.chat.completions.create(
                            model="meta-llama/llama-4-maverick:free",
                            messages=[
                                {
                                    "role": "user",
                                    "content": (
                                            "–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å. "
                                            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ '–í–æ—Ç —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è'. "
                                            "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∂–∞—Ç—ã–π —Ç–µ–∫—Å—Ç:\n\n"
                                            f"{text_to_process}"
                                        )
                                }
                            ]
                        )
                        text_to_process = compress_response.choices[0].message.content.strip()
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏: {e}")

                    safe_content = escape(text_to_process)

                    # –ê–≤—Ç–æ—Ä
                    try:
                        profile_link = await page.locator("div.nick-username a").first.get_attribute("href")
                        username = profile_link.split("/")[-1] if profile_link else "–ê–≤—Ç–æ—Ä"
                        is_verified = await page.locator("div.avatar-name-container svg").count() > 0
                        verified_prefix = "‚úÖ" if is_verified else ""
                        formatted_nick = f"{verified_prefix}@{username}"
                    except Exception as e:
                        logging.error(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∞–≤—Ç–æ—Ä–∞: {e}")
                        formatted_nick = "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

                    # –í—Ä–µ–º—è
                    try:
                        post_time = await page.locator("div.css-12fealn > span").first.inner_text()
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞: {e}")
                        post_time = "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    author_block = escape(f"{formatted_nick} | üïí {post_time}")

                    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
                    source_url = page.url
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫", url=source_url)]]
                    )

                    full_text = f"<pre>{safe_content}</pre>\n<blockquote>{author_block}</blockquote>"

                    chunks = [full_text[i:i+4000] for i in range(0, len(full_text), 4000)]
                    for j, chunk in enumerate(chunks):
                        await bot.send_message(
                            chat_id=CHANNEL_ID,
                            text=chunk,
                            reply_markup=keyboard if j == len(chunks) - 1 else None,
                            parse_mode=ParseMode.HTML,
                        )

                    await page.go_back()
                    await page.wait_for_selector("div.card-content-box", timeout=15000)
                    cards = await page.query_selector_all("div.card-content-box")
                    await asyncio.sleep(2)

                except Exception as e:
                    logging.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ #{i+1}\n{e}")
                    continue

            await browser.close()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

def format_monospaced_table(positions_dict: dict, old_positions: dict, old_tokens: set) -> str:
    lines = []
    header = f"{'#':<2} {'Token':<10} {'Price':<10} {'Change':<7} Note"
    lines.append(header)
    lines.append("-" * len(header))

    sorted_items = sorted(positions_dict.items(), key=lambda x: x[1]['pos'])

    for i, (name, data) in enumerate(sorted_items):
        price = data['price']
        change = data['change']
        badge = data['badge']
        note = ""

        if name not in old_tokens:
            note = "üÜï"
        elif old_positions[name]['pos'] != data['pos']:
            old_pos = old_positions[name]['pos'] + 1
            new_pos = data['pos'] + 1
            arrow = "üî∫" if new_pos < old_pos else "üîª"
            note = f"{arrow} {old_pos}‚Üí{new_pos}"

        if badge:
            note += f" ({badge})" if note else f"({badge})"

        lines.append(f"{i+1:<2} {name:<10} {price:<10} {change:<7} {note}")

    result = "<pre>\n" + "\n".join(lines) + "\n</pre>"
    logging.info(f"üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞:\n{result}")
    return result

async def fetch_stat_text(force_send=False):
    url = "https://www.binance.com/ru/square/"

    async with async_playwright() as pw:
        browser = await pw.chromium.launch(headless=True)
        context = await browser.new_context(user_agent=USER_AGENT)
        page = await context.new_page()

        await page.route("**/*", lambda route, request: route.abort()
                         if request.resource_type in ["image", "stylesheet", "font", "media"]
                         else route.continue_())

        start = time.time()
        await page.goto(url, timeout=30000)
        await page.wait_for_load_state("networkidle")
        logging.info(f"‚è± –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {round(time.time() - start, 2)} —Å–µ–∫")

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===
        found = False
        try:
            await page.wait_for_selector("h2:has-text('Most Searched')", timeout=20000)
            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: Most Searched")
            found = True
        except:
            try:
                await page.wait_for_selector("h2.css-1ld3mhe:has-text('–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º')", timeout=30000)
                logging.info("‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º")
                found = True
            except:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        if not found:
            raise RuntimeError("–ó–∞–≥–æ–ª–æ–≤–æ–∫ 'Most Searched' –∏–ª–∏ '–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–µ—Å—å –±–ª–æ–∫ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        try:
            await page.locator("div.css-1h8s7v0").click(timeout=3000)
            await page.wait_for_timeout(1000)
        except:
            pass

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—ã
        stat_section = page.locator("div.css-6srrto")
        links = stat_section.locator("a")
        count = await links.count()
        logging.info(f"üî¢ –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç: {count}")

        positions = {}
        for i in range(count):
            try:
                logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É #{i+1}")
                coin = links.nth(i)

                name = await coin.locator("div.css-1q7imhr").inner_text()
                price = await coin.locator("div.css-1dru1te").inner_text()
                change = await coin.locator("div.css-1qhsfgf, div.css-1wsvtgi").inner_text()

                badge = ""
                try:
                    badge = await coin.locator("div.css-75hguj").inner_text()
                except:
                    pass

                positions[name] = {
                    "pos": i,
                    "price": price,
                    "change": change,
                    "badge": badge
                }

                logging.info(f"‚úÖ {name}: {price} ({change}) {badge}")

            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –º–æ–Ω–µ—Ç—ã #{i+1}: {e}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        old_positions = {}
        if os.path.exists(CACHE_FILE):
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                old_positions = json.load(f)

            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—ç—à–∞
            if isinstance(list(old_positions.values())[0], int):
                old_positions = {
                    k: {"pos": v, "price": "", "change": "", "badge": ""}
                    for k, v in old_positions.items()
                }

        old_tokens = set(old_positions.keys())

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changed = False
        for name in positions:
            if name not in old_positions or positions[name]["pos"] != old_positions[name]["pos"]:
                changed = True
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫—ç—à
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(positions, f, ensure_ascii=False, indent=2)

        await browser.close()

        if changed or force_send:
            table = format_monospaced_table(positions, old_positions, old_tokens)
            logging.info(f"üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª–∏–Ω–æ–π {len(table)} —Å–∏–º–≤–æ–ª–æ–≤")
            return f"üìä <b>–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º (6 —á.)</b>\n{table}"
        else:
            logging.info("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return None


@router.message(F.text == "/stat")
async def stat_command(message: types.Message):
    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stat –æ—Ç user_id={message.from_user.id}")
    await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å Binance Square...")

    try:
        text = await fetch_stat_text()
        logging.info(f"üìä fetch_stat_text –≤–µ—Ä–Ω—É–ª: {'–µ—Å—Ç—å —Ç–µ–∫—Å—Ç' if text else '–ø—É—Å—Ç–æ'}")

        if text:
            await message.answer(text, parse_mode=ParseMode.HTML)
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        else:
            logging.info("üìÅ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞...")
            from_cache = await fetch_stat_text(force_send=True)
            logging.info(f"üì¶ fetch_stat_text(force_send=True) –≤–µ—Ä–Ω—É–ª: {'–µ—Å—Ç—å –∫—ç—à' if from_cache else '—Ç–æ–∂–µ –ø—É—Å—Ç–æ'}")

            if from_cache:
                await message.answer(from_cache, parse_mode=ParseMode.HTML)
                await message.answer("üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à —Ç–æ–∂–µ –ø—É—Å—Ç.")
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ /stat")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")




async def check_stat_periodically():
    while True:
        print("üîÅ –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞...")
        try:
            text = await fetch_stat_text()
            if text:
                await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode=ParseMode.HTML)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", e)
        await asyncio.sleep(360)  

def save_post_id(token: str, post_id: str):
    with sqlite3.connect(DB_PATH1) as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO posts (token, post_id) VALUES (?, ?)", (token, post_id))
        conn.commit()


def is_new_post(token: str, post_id: str) -> bool:
    with sqlite3.connect(DB_PATH1) as conn:
        c = conn.cursor()
        c.execute("SELECT 1 FROM posts WHERE token = ? AND post_id = ?", (token, post_id))
        return c.fetchone() is None


# === –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–∞ ===
async def parse_latest_post(token: str):
    url = f"https://www.binance.com/ru/square/search?s={token}"
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        context = await browser.new_context(locale="ru-RU", user_agent=USER_AGENT)
        page = await context.new_page()

        await page.goto(url)
        await page.wait_for_selector(".card-content-box", timeout=30000)
        card = await page.query_selector(".card-content-box")
        if not card:
            return None

        await card.click()
        await page.wait_for_selector("div#articleBody", timeout=20000)

        try:
            translate_btn = page.locator("div.common-trans-btn-list-item-text.css-vurnku >> text=–ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
            if await translate_btn.count() > 0:
                await translate_btn.click()
                await asyncio.sleep(1.5)
        except:
            pass

        raw_content = await page.locator("div.richtext-container").inner_text()
        text_to_process = raw_content.strip()

        if not text_to_process or len(text_to_process) < 10:
            return None

        # –ü–µ—Ä–µ–≤–æ–¥
        if not re.search(r'[–∞-—è–ê-–Ø]', text_to_process):
            try:
                response = openai_client.chat.completions.create(
                    model="meta-llama/llama-4-maverick:free",
                    messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π:\n\n{text_to_process}"}]
                )
                text_to_process = response.choices[0].message.content.strip()
            except:
                pass

        # –°–∂–∞—Ç–∏–µ
        if text_to_process.strip():
            try:
                compress_response = openai_client.chat.completions.create(
                    model="meta-llama/llama-4-maverick:free",
                    messages=[
                        {
                            "role": "user",
                            "content": (
                                "–°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—É—Ç—å. –£–¥–∞–ª–∏ –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏, –ø—Ä–∏–º–µ—Ä—ã –∏ –ø–æ–≤—Ç–æ—Ä—ã. "
                                "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç:\n\n" + text_to_process.strip()
                            )
                        }
                    ]
                )
                text_to_process = compress_response.choices[0].message.content.strip()
            except:
                pass

        safe_content = escape(text_to_process)

        try:
            profile_link = await page.locator("div.nick-username a").first.get_attribute("href")
            username = profile_link.split("/")[-1] if profile_link else "–ê–≤—Ç–æ—Ä"
            is_verified = await page.locator("div.avatar-name-container svg").count() > 0
            formatted_nick = f"{'‚úÖ' if is_verified else ''}@{username}"
        except:
            formatted_nick = "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        try:
            post_time = await page.locator("div.css-12fealn > span").first.inner_text()
        except:
            post_time = "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        cleaned_for_id = re.sub(r'\s+', '', text_to_process.strip())
        post_id = hashlib.md5(cleaned_for_id.encode()).hexdigest()

        return {
            "id": post_id,
            "text": safe_content,
            "author": f"{formatted_nick} | üïí {post_time}",
            "url": page.url
        }


    
@dp.message(Command("laster"))
async def cmd_last(message: Message):
    args = message.text.strip().split()
    if len(args) != 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /laster <—Ç–æ–∫–µ–Ω>")
        return

    token = args[1].lower()
    await message.reply(f"‚è≥ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –ø–æ <b>{token.upper()}</b>...")

    post = await parse_latest_post(token)
    if not post:
        await message.reply("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"<pre>{post['text']}</pre>\n<blockquote>{escape(post['author'])}</blockquote>"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫", url=post['url'])]]
    )

    await bot.send_message(CHANNEL_ID, text=text, reply_markup=keyboard)


@dp.message(Command("track"))
async def cmd_track(message: Message):
    args = message.text.strip().split()
    if len(args) != 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /track <—Ç–æ–∫–µ–Ω>")
        return

    token = args[1].lower()
    if token in TRACKED_TOKENS:
        TRACKED_TOKENS.remove(token)
        await message.reply(f"‚õî –¢—Ä–µ–∫–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ <b>{token.upper()}</b> –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        TRACKED_TOKENS.add(token)
        await message.reply(f"‚úÖ –¢—Ä–µ–∫–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ <b>{token.upper()}</b> –≤–∫–ª—é—á–µ–Ω.")


async def tracker_loop():
    while True:
        for token in list(TRACKED_TOKENS):
            try:
                post = await parse_latest_post(token)
                if post and is_new_post(token, post['id']):
                    save_post_id(token, post['id'])
                    text = f"<pre>{post['text']}</pre>\n<blockquote>{escape(post['author'])}</blockquote>"
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫", url=post['url'])]]
                    )
                    await bot.send_message(CHANNEL_ID, text=text, reply_markup=keyboard)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è {token}: {e}")
        await asyncio.sleep(180)


async def main():
    init_db()
    migrate_db()
    asyncio.create_task(check_new_posts())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
